MINIMAL=
W_EMACS=

EXPERIMENTAL="N"
EMACS_D=${HOME}/.emacs.d

MY_SHELL=$(ps -o command -p $$ | grep -v "^COMMAND$" | tr -d '-' | cut -d' ' -f1)
SCRIPT_DIR="$( cd "$( dirname "$0" )" && pwd )"

_FULL_PATH="$( cd "$( dirname "$0" )" && pwd -P )"
_REAL_HOME="$( cd ~  && pwd -P )"
_SCRIPTDIR="$( echo .${_FULL_PATH#$_REAL_HOME} )"

installer=$(basename $0)

check_args() {
  for i in "$@"; do
    case "$i" in
      "--minimal"     ) MINIMAL="--minimal"     ;;
      "--with-emacs"  ) W_EMACS="--with-emacs"  ;;
      "-h" | "--help" ) help; exit              ;;
      *               ) die "$@"                ;;
    esac
  done
}

help() {
  >&2 echo
  >&2 echo "installs $installer without overwriting existing files, directories, or links"
  >&2 echo
  >&2 echo "Usage: $installer install [OPTIONS] where supported OPTIONS are:"
  >&2 echo "        [ none | empty string ] (default) --minimal --with-emacs"
  >&2 echo
  >&2 echo " $installer on Linux: default install Bash and all but 0xMF/emacs.d"
  >&2 echo "        [bash,config,git,lisp,misc,pal,ruby,tmux,vim,zsh]"
  >&2 echo
  >&2 echo "    --minimal: a minimal setup for a typical Linux (bash+vim) server"
  >&2 echo "        [bash,git,misc,ruby,vim]"
  >&2 echo
  >&2 echo "    --with-emacs: installs everything including Emacs"
  >&2 echo "        [bash,config,emacs,git,lisp,misc,pal,ruby,tmux,vim,zsh]"
  >&2 echo
  >&2 echo "    --with-emacs --minimal: install for Linux server with Emacs"
  >&2 echo "        [bash,emacs,git,misc,ruby,vim]"
  >&2 echo
  >&2 echo " $installer on OpenBSD: default install ksh and all but 0xMF/emacs.d"
  >&2 echo "        [git,ksh,lisp,misc,pal,ruby,tmux,vim,zsh]"
  >&2 echo
  >&2 echo "    --minimal: a minimal setup for an OpenBSD (ksh+vim) server"
  >&2 echo "        [git,ksh,misc,ruby,vim]"
  >&2 echo
  >&2 echo "  when run from OpenBSD (ksh shell)"
  >&2 echo "    --with-emacs installs both ksh and emacs"
  >&2 echo "        [emacs,git,ksh,misc,ruby,vim]"
  >&2 echo
  >&2 echo "  -h | --help: this message"
  >&2 echo
  >&2 echo "Operating Systems:   Arch (default), Debian, Kali, and OpenBSD"
  >&2 echo "Shells:              Bash, ksh, Zsh (default)"
  >&2 echo "Editors (term/gui):  DrRacket, Emacs, Vim (default)"
  >&2 echo "Languages:           sbcl, Racket, Perl, Ruby"
  >&2 echo "Version Control:     Git (default)"
  >&2 echo "Known Issues:"
  >&2 echo
  >&2 echo "   $installer does not uninstall links, files, or directories created during install"
  >&2 echo
}

check_installer_shell() {
  if [ "$MY_SHELL" != "bash" ]; then
    if  [ "`uname`" = "OpenBSD" ];  then
      >&2 echo -n 'Do you want to continue with EXPERIMENTAL features of ksh on OpenBSD? (yes/No) '
      read EXPERIMENTAL
      [ "$EXPERIMENTAL" != "yes" ] && exit 1
   else
      [ "$MY_SHELL" = "ksh" ] && return

      >&2 echo "The shell used to run this script was: $MY_SHELL"
      >&2 echo
      >&2 echo "ERROR: $installer installation was tested using #!/bin/bash and #!/bin/ksh"
      >&2 echo
      >&2 echo "you could try running this script with:"
      >&2 echo "   bash path/to/$installer"
      >&2 echo "   ksh  path/to/$installer"
      >&2 echo
      exit 1
    fi
  fi

  if [ "$1" = "--with-emacs" ]; then
    EMACS_D_REFRESH="N"
    EMACS_D_DOTFILES=".custom.el.~undo-tree~ .emacs.desktop .historian .session .smex-items .uptimes.el"

    if [[ -d ${EMACS_D} || -L ${EMACS_D} || -d ${HOME}/repos/emacs.d ]]; then
      [[ -s /usr/bin/perl ]] && {
        echo "Do you want to remove ONLY these files from ~/.emacs.d: " >&2
        echo -ne "  $(echo $EMACS_D_DOTFILES | perl -pe 's| |\n  |g')\n\n (yes/N)? " >&2
        read EMACS_D_REFRESH
        if [ "$EMACS_D_REFRESH" = "yes" ]; then
          for f in ${EMACS_D_DOTFILES}
          do
            if [ -e ${EMACS_D}/$f ]; then
              echo "  - deleting ${EMACS_D}/$f"
              rm -f ${EMACS_D}/$f
            fi
          done
          echo
        fi
      }
    fi
  fi
}

installed=

# bash
_bash() {
  installed=
  echo "checking bash..." >&2

  # install .bash if not present else do nothing
  [[ -d $HOME/.bash || -L $HOME/.bash ]] && {
    echo " - found .bash/ not installing" >&2
  } || {
    installed="bash/"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/bash ~/.bash; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/bash $HOME/.bash; }
  }

  [[ -e $HOME/.bashrc || -L $HOME/.bashrc ]] && {
    echo " - found .bashrc, not installing" >&2
  } || {
    installed="$installed .bashrc"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/bash/bashrc.bash ~/.bashrc; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/bash/bashrc.bash $HOME/.bashrc; }
  }

  [[ -e $HOME/.bash_profile || -L $HOME/.bash_profile ]] && {
    echo " - found .bash_profile, not installing" >&2
  } || {
    installed="$installed .bash_profile"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/bash/bash_profile ~/.bash_profile; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/bash/bash_profile $HOME/.bash_profile; }
  }

  [[ -e $HOME/.bash_logout || -L $HOME/.bash_logout ]] && {
    echo " - found .bash_logout, not installing" >&2
  } || {
    installed="$installed .bash_logout"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/bash/bash_logout ~/.bash_logout; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/bash/bash_logout $HOME/.bash_logout; }
  }

  [ ! -z "$installed" ] && {
    echo " - ...INSTALLED $installed" >&2
    echo "   install your custom settings in $HOME/.bash/local.bash" >&2
  }
}

# config/misc
_config_misc() {
  [[ -e $HOME/.config ]] && {
    installed=
    echo "checking .config/chromium-flags.conf..." >&2
    [[ -L $HOME/.config/chromium-flags.conf ]] && { :
      echo " - found .config/chromium-flags.conf, not installing" >&2
    } || {
      installed="chromium-flags.conf"
      ln -s ${SCRIPT_DIR%bin}misc/config/chromium-flags.conf $HOME/.config/chromium-flags.conf
    }

    [ ! -z "$installed" ] && echo "INSTALLED!" >&2
  }
}

# emacs
_emacs() {
  echo "checking emacs.d..."

  [[ -d ${EMACS_D} || -L ${EMACS_D} || -d ${HOME}/repos/emacs.d ]] && {
    echo  " - found .emacs.d, not installing" >&2
  } || {
    mkdir -p ${HOME}/repos
    tput bold
    git clone https://github.com/0xMF/emacs.d.git ${HOME}/repos/emacs.d
    tput sgr0
    ln -s $HOME/repos/emacs.d ${EMACS_D}
    echo " - ...INSTALLED .emacs.d/" >&2
  }

  [[ -e $HOME/.emacs || -L $HOME/.emacs ]] && {
      echo " - found .emacs, not installing" >&2
  } || {
    ln -s ${EMACS_D}/emacs.el $HOME/.emacs
    echo " - ...INSTALLED .emacs" >&2
  }
}

# git
_git() {
  installed=
  echo "checking git..." >&2

  [[ -d $HOME/.git || -L $HOME/.git ]] && { :
    echo " - found .git, not installing" >&2
  } || {
    installed=".git/"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}tracker/git ~/.git; } \
      || { ln -s ${SCRIPT_DIR%bin}tracker/git $HOME/.git; }
  }

  [[ -e $HOME/.gitconfig || -L $HOME/.gitconfig ]] && {
    echo " - found .gitconfig, not installing" >&2
  } || {
    installed="$installed .gitconfig"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}tracker/gitrc.gitconfig ~/.gitconfig; } \
      || { ln -s ${SCRIPT_DIR%bin}tracker/gitrc.gitconfig $HOME/.gitconfig; }
  }

  [[ -e $HOME/.gitattributes || -L $HOME/.gitattributes ]] && { :
    echo " - found .gitattributes, not installing" >&2
  } || {
    installed="$installed .gitattirbutes"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}tracker/git/gitattributes ~/.gitattributes; } \
      || { ln -s ${SCRIPT_DIR%bin}tracker/git/gitattributes $HOME/.gitattributes; }
  }

  [[ -e $HOME/.gitignore || -L $HOME/.gitignore ]] && { :
    echo " - found .gitignore, not installing" >&2
  } || {
    installed="$installed .gitignore"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}tracker/git/ignore.conf ~/.gitignore; } \
      || { ln -s ${SCRIPT_DIR%bin}tracker/git/ignore.conf $HOME/.gitignore; }
  }

  [ ! -z "$installed" ] && {
    echo " - ...INSTALLED $installed" >&2
    echo "   install local.gitconfig and ignore.conf in $HOME/.git" >&2
  }
}

# ksh
_ksh() {
  installed=
  echo "checking ksh..." >&2

  [[ -e $HOME/.kshrc || -L $HOME/.kshrc ]] && {
    echo " - found .kshrc, not installing" >&2
  } || {
    installed=".kshrc"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/ksh/kshrc.ksh ~/.kshrc; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/ksh/kshrc.ksh $HOME/.kshrc; }
  }

  # install .ksh if not present else do nothing
  [[ -d $HOME/.ksh || -L $HOME/.ksh ]] && { :
    echo " - found .ksh/, not installing" >&2
  } || {
    installed=".ksh/"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/ksh ~/.ksh; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/ksh $HOME/.ksh; }
  }

  [[ -e $HOME/.profile || -L $HOME/.profile ]] && { :
    echo " - found .profile, not installing" >&2
  } || {
    installed="$installed ksh_profile"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/ksh/ksh_profile ~/.profile; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/ksh/ksh_profile $HOME/.ksh_profile; }
  }

  [ ! -z "$installed" ] && {
    echo " - ...INSTALLED $installed" >&2
    echo "   install your custom settings in $HOME/.ksh/local.ksh" >&2
  }
}

# lisp
_lisp() {
  installed=
  echo "checking lisps..." >&2

  [[ -d $HOME/.quicklisp || -L $HOME/.quicklisp ]] && {
    echo " - found .quicklisp, not installing" >&2
  } || {
    installed="$installed quicklisp"
    mkdir $HOME/.quicklisp
    touch $HOME/.quicklisp/slime-helper.el
    installed="$installed .quicklisp"
  }

  if [[ -e $HOME/.sbclrc || -L $HOME/.sbclrc ]]; then
    echo " - found .sbclrc, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}lisps/sbclrc ~/.sbclrc; } \
     || { ln -s ${SCRIPT_DIR%bin}lisps/sbclrc $HOME/.sbclrc; }
    echo " - ...INSTALLED .sbclrc" >&2
    installed="$installed .sbclrc"
  fi

  [ ! -z "$installed" ] && echo " - ...INSTALLED $installed" >&2
}

# misc
_misc() {
  echo "checking misc dotfiles..." >&2

  if [[ -e $HOME/.inputrc || -L $HOME/.inputrc ]]; then
    echo " - found .inputrc, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/inputrc ~/.inputrc; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/inputrc $HOME/.inputrc; }
    echo " - ...INSTALLED .inputrc" >&2
  fi

  if [[ -d $HOME/.toprc || -L $HOME/.toprc ]]; then
    echo " - found .toprc, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/toprc ~/.toprc; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/toprc $HOME/.toprc; }
    echo " - ...INSTALLED .toprc" >&2
  fi
}

# pal
_pal() {
  echo "checking pal..." >&2

  [[ -d $HOME/.pal || -L $HOME/.pal ]] && {
    echo " - found .pal, not installing" >&2
  } || {
    installed=".pal"
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/pal ~/.pal; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/pal $HOME/.pal; }
    echo " - ...INSTALLED .pal" >&2
  }
}

# ruby
_ruby() {
  echo "checking ruby..." >&2

  if [[ -e $HOME/.gemrc || -L $HOME/.gemrc ]]; then
    echo " - found .gemrc, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/gemrc ~/.gemrc; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/ruby/gemrc $HOME/.gemrc; }
    echo " - ...INSTALLED .gemrc" >&2
  fi
  if [[ -e $HOME/.pryrc || -L $HOME/.pryrc ]]; then
    echo " - found pryrc, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/pryrc ~/.pryrc; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/ruby/pryrc $HOME/.pryrc; }
    echo " - ...INSTALLED .pryrc" >&2
  fi
}

# tmux
_tmux() {
  echo "checking tmux..." >&2

  if [[ -e $HOME/.tmux.conf || -L $HOME/.tmux.conf ]]; then
    echo " - found .tmux.conf, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/tmux.conf ~/.tmux.conf; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/tmux.conf $HOME/.tmux.conf; }
    echo " - ...INSTALLED .tmux.conf" >&2
  fi

  if [[ -d $HOME/.tmuxinator || -L $HOME/.tmuxinator ]]; then
    echo " - found .tmuxinator, not installing" >&2
  else
    [[ "$EXPERIMENTAL" = "yes" ]] \
     && { ln -s ${_SCRIPTDIR%bin}misc/tmuxinator ~/.tmuxinator; } \
     || { ln -s ${SCRIPT_DIR%bin}misc/tmuxinator $HOME/.tmuxinator; }
    echo " - ...INSTALLED .tmuxinator" >&2
  fi
}


# vim
_vim() {
  installed=
  echo "checking vim..." >&2

  [[ -e $HOME/.vimrc || -L $HOME/.vimrc ]] && {
    echo " - found .vimrc, not installing" >&2
  } || {
    installed=".vimrc"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}editors/vim/vimrc.vim ~/.vimrc; } \
      || { ln -s ${SCRIPT_DIR%bin}editors/vim/vimrc.vim $HOME/.vimrc; }
  }

  [[ -d $HOME/.vim || -L $HOME/.vim ]] && { :
    echo " - found .vim/ not installing" >&2
  } || {
    installed="$installed .vim/"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}editors/vim ~/.vim; } \
      || { ln -s ${SCRIPT_DIR%bin}editors/vim $HOME/.vim; }
  }

  [ ! -z "$installed" ] && echo " - ...INSTALLED $installed" >&2
}

# zsh
_zsh() {
  installed=
  echo "checking zsh..." >&2

  [[ -e $HOME/.zshrc || -L $HOME/.zshrc ]] && {
    echo " - found .zshrc, not installing" >&2
  } || {
    installed="zshrc"
    [[ "$EXPERIMENTAL" = "yes" ]] \
      && { ln -s ${_SCRIPTDIR%bin}shells/zsh/zshrc.zsh ~/.zshrc; } \
      || { ln -s ${SCRIPT_DIR%bin}shells/zsh/zshrc.zsh $HOME/.zshrc; }
  }

  [ ! -z "$installed" ] && echo " - ...INSTALLED $installed" >&2
}

die() {
  >&2 echo
  >&2 echo Unknown option detected: "$@"
  help
  exit 1
}

install() {

  check_args "$@" || die "$@"
  check_installer_shell

  [ "$W_EMACS" = "--with-emacs" ] && _emacs

   _git

  if [ "$EXPERIMENTAL" = "yes" ]; then
    _ksh
  else
    _bash
  fi

  if [ "$MINIMAL" != "--minimal" ]; then
    _config_misc
    _lisp
    _pal
    _tmux
    _zsh
  fi

   _misc
   _ruby
   _vim
}

if [ -z "$1" ]; then
  check_installer_shell
  help
else
  if [ "$1" = "install" ]; then
    shift
    if [ -z "$1" ] || [ "$1" = "--minimal" ] || [ "$1" = "--with-emacs" ]; then
      install "$@"
    else
      die "$@"
    fi
  else
    help
  fi
fi

# vim: nonu:nowrap:nospell:ft=sh
